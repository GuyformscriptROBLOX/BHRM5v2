-- SERVICES 
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local Lighting = game:GetService("Lighting")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- SETTINGS
local aimbotSmoothing = 0
local aimbotFOV = 60
local scanCooldown = 0.15
local aimbotEnabled = true
local hitboxExpanderEnabled = true -- nowy toggle dla hitbox expander

-- VARIABLES
local aiming = false
local currentTarget = nil
local lastScan = 0
local cachedNPCs = {}
local createdESP = {}
local originalFogEnd = Lighting.FogEnd
local originalAtmospheres = {}
local currentHitboxSize = 3 -- domyślny rozmiar jak w GUI

-- HOOK METATABLE TO HIDE HITBOX EXPANDER
local mt = getrawmetatable(game)
local oldIndex = mt.__index
setreadonly(mt, false)

mt.__index = newcclosure(function(self, key)
    if hitboxExpanderEnabled and key == "Size" and self.Name == "Head" and self.Parent and self.Parent.Name == "Male" then
        -- Zwracaj oryginalny rozmiar zamiast powiększonego
        return Vector3.new(1,1,1)
    elseif hitboxExpanderEnabled and key == "Transparency" and self.Name == "Head" and self.Parent and self.Parent.Name == "Male" then
        -- Zwracaj oryginalną przezroczystość (0), nawet jeśli jest 0.5 fizycznie
        return 0
    elseif hitboxExpanderEnabled and key == "Material" and self.Name == "Head" and self.Parent and self.Parent.Name == "Male" then
        return Enum.Material.SmoothPlastic
    elseif hitboxExpanderEnabled and key == "Color" and self.Name == "Head" and self.Parent and self.Parent.Name == "Male" then
        return Color3.new(1,1,1)
    end
    return oldIndex(self, key)
end)

setreadonly(mt, true)

-- HELPER
local allowedWeapons = {
    ["AI_AK"] = true, ["igla"] = true, ["AI_RPD"] = true, ["AI_PKM"] = true,
    ["AI_SVD"] = true, ["rpg7v2"] = true, ["AI_PP19"] = true, ["AI_RPK"] = true,
    ["AI_SAIGA"] = true, ["AI_MAKAROV"] = true, ["AI_PPSH"] = true, ["AI_DB"] = true,
    ["AI_MOSIN"] = true, ["AI_VZ"] = true, ["AI_6B47_Rifleman"] = true,
    ["AI_6B45_Commander"] = true, ["AI_6B47_Commander"] = true, ["AI_6B45_Rifleman"] = true,
    ["AI_KSVK"] = true, ["AI_Chicom"] = true, ["AI_6B26"] = true, ["AI_6B3M"] = true,
    ["AI_Beanie"] = true, ["AI_FaceCover"] = true
}

local function hasAllowedWeapon(npc)
    for _, item in ipairs(npc:GetChildren()) do
        if typeof(item.Name) == "string" and allowedWeapons[item.Name] then
            return true
        end
        for _, desc in ipairs(item:GetDescendants()) do
            if typeof(desc.Name) == "string" and allowedWeapons[desc.Name] then
                return true
            end
        end
    end
    return false
end

local function isAlive(npc)
    for _, d in ipairs(npc:GetDescendants()) do
        if d:IsA("BallSocketConstraint") then return false end
    end
    return true
end

local function clearHeadVisuals(head)
    head.Transparency = 0
    head.Material = Enum.Material.SmoothPlastic
    head.Color = Color3.new(1,1,1)
end

local function setHeadVisuals(head)
    head.Transparency = 0.5
    head.Material = Enum.Material.Neon
    head.Color = Color3.new(1,0,0)
end

local function updateAllHitboxes(size)
    for npc, data in pairs(cachedNPCs) do
        local head = data.head
        if head then
            local oldCFrame = head.CFrame
            head.Size = Vector3.new(size, size, size)
            head.CFrame = oldCFrame
            local esp = head:FindFirstChild("HeadESP")
            if esp then
                esp.Size = head.Size
            end
        end
    end
end

local function resetAllHitboxes()
    for npc, data in pairs(cachedNPCs) do
        local head = data.head
        if head then
            local oldCFrame = head.CFrame
            head.Size = Vector3.new(1,1,1)
            head.CFrame = oldCFrame
            clearHeadVisuals(head)
            local esp = head:FindFirstChild("HeadESP")
            if esp then
                esp.Size = head.Size
            end
        end
    end
end

local function createNpcHeadESP(npc)
    if createdESP[npc] then return end
    local head = npc:FindFirstChild("Head")
    if head then
        -- Usuwanie starego ESP jeśli istnieje
        local oldEsp = head:FindFirstChild("HeadESP")
        if oldEsp then oldEsp:Destroy() end
        -- Ustaw rozmiar na zawsze aktualny currentHitboxSize
        head.Size = Vector3.new(currentHitboxSize, currentHitboxSize, currentHitboxSize)
        setHeadVisuals(head)
        local esp = Instance.new("BoxHandleAdornment")
        esp.Name = "HeadESP"
        esp.Adornee = head
        esp.AlwaysOnTop = true
        esp.ZIndex = 5
        esp.Size = head.Size
        esp.Transparency = 0.5
        esp.Color3 = Color3.new(0, 1, 0)
        esp.Parent = head
        createdESP[npc] = true
        -- Dodaj natychmiastową eliminację przy trafieniu w head
        if not head:FindFirstChild("OneTap") then
            local oneTap = Instance.new("BoolValue")
            oneTap.Name = "OneTap"
            oneTap.Parent = head
            head.Touched:Connect(function(hit)
                if hit:IsA("BasePart") then
                    for _, d in ipairs(npc:GetDescendants()) do
                        if d:IsA("BallSocketConstraint") then
                            d:Destroy()
                        end
                    end
                end
            end)
        end
        task.spawn(function()
            while isAlive(npc) do task.wait(0.5) end
            if esp and esp.Parent then esp:Destroy() end
            createdESP[npc] = nil
            cachedNPCs[npc] = nil -- Usuwanie z cache po śmierci
        end)
    end
end

-- CACHE NPC (optymalizacja: osobna tabela na głowy)
local npcHeads = {}

local function processNPC(npc)
    if cachedNPCs[npc] then return end
    if npc:IsA("Model") and npc.Name == "Male" and hasAllowedWeapon(npc) and isAlive(npc) then
        local head = npc:FindFirstChild("Head")
        if head then
            cachedNPCs[npc] = {npc = npc, head = head}
            npcHeads[#npcHeads+1] = head
            createNpcHeadESP(npc)
        end
    end
end

-- Nasłuchuj tylko dodanie nowych NPC typu Male
workspace.ChildAdded:Connect(function(child)
    if child:IsA("Model") and child.Name == "Male" then
        -- Poczekaj aż broń zostanie dodana (jeśli nie ma od razu)
        local function tryProcess()
            if hasAllowedWeapon(child) and isAlive(child) then
                processNPC(child)
                return true
            end
            return false
        end
        -- Spróbuj od razu
        if not tryProcess() then
            -- Jeśli nie ma broni, nasłuchuj jej dodania przez krótki czas
            local con
            local timeout = false
            con = child.ChildAdded:Connect(function()
                if tryProcess() then
                    if con then con:Disconnect() end
                end
            end)
            -- Timeout po 5 sekundach
            task.delay(5, function()
                timeout = true
                if con then con:Disconnect() end
            end)
        end
    end
end)

-- Na starcie tylko przetwarzaj istniejące NPC
for _, npc in ipairs(workspace:GetChildren()) do
    processNPC(npc)
end

-- FPS OPTIMIZATION
local aimbotFrameLimiter = 0
local aimbotFrameSkip = 2 -- ile klatek pominąć (1 = co drugą klatkę)

-- Zamiast RenderStepped, użyj Heartbeat do mniej krytycznych rzeczy (np. updateAllHitboxes, resetAllHitboxes)
-- (nie trzeba zmieniać, jeśli nie są wywoływane często)

-- AIMBOT (optymalizacja: ogranicz raycasty i obliczenia)
RunService.RenderStepped:Connect(function()
    aimbotFrameLimiter = aimbotFrameLimiter + 1
    if aimbotFrameLimiter < aimbotFrameSkip then
        return
    end
    aimbotFrameLimiter = 0

    if not aiming or not aimbotEnabled or next(cachedNPCs) == nil then
        currentTarget = nil
        return
    end
    if tick() - lastScan > scanCooldown or not currentTarget or not currentTarget:IsDescendantOf(workspace) or not isAlive(currentTarget.Parent) then
        lastScan = tick()
        local newTarget = getClosestTarget()
        if newTarget then
            local rayParams = RaycastParams.new()
            rayParams.FilterType = Enum.RaycastFilterType.Blacklist
            rayParams.FilterDescendantsInstances = {LocalPlayer.Character, Camera}
            local direction = (newTarget.Position - Camera.CFrame.Position).Unit * 1000
            local result = workspace:Raycast(Camera.CFrame.Position, direction, rayParams)
            if result and result.Instance and result.Instance:IsDescendantOf(newTarget.Parent) then
                currentTarget = newTarget
            else
                currentTarget = nil
            end
        else
            currentTarget = nil
        end
    end
    if currentTarget then
        local head = currentTarget
        local screen3D, onScreen = Camera:WorldToViewportPoint(head.Position)
        if onScreen then
            local mousePos = UserInputService:GetMouseLocation()
            local screenPos = Vector2.new(screen3D.X, screen3D.Y)
            local dx = (screenPos.X - mousePos.X) / math.clamp(aimbotSmoothing, 0.6, 100)
            local dy = (screenPos.Y - mousePos.Y) / math.clamp(aimbotSmoothing, 0.6, 100)
            if typeof(mousemoverel) == "function" then
                mousemoverel(dx, dy)
            end
        end
    end
end)

-- CACHE NPC (optymalizacja: nie sprawdzaj co klatkę, tylko co 0.5s)
local function periodicNPCCheck()
    while true do
        for _, npc in ipairs(workspace:GetChildren()) do
            processNPC(npc)
        end
        task.wait(0.5)
    end
end
task.spawn(periodicNPCCheck)

-- Usuwamy automatyczne przetwarzanie na starcie i ChildAdded (bo periodicNPCCheck to załatwia)
-- Skasuj lub zakomentuj:
--[[]
workspace.ChildAdded:Connect(function(child)
    task.wait(0.1)
    processNPC(child)
end)

for _, npc in ipairs(workspace:GetChildren()) do
    processNPC(npc)
end
]]

-- AIMBOT (optymalizacja: najpierw wybierz najbliższego, potem raycast)
local function getClosestTarget()
    if next(cachedNPCs) == nil then return nil end
    local mousePos = UserInputService:GetMouseLocation()
    local closestDist = math.huge
    local bestHead = nil
    for _, data in pairs(cachedNPCs) do
        local head = data.head
        if head and head:IsA("BasePart") then
            local screen3D, onScreen = Camera:WorldToViewportPoint(head.Position)
            if onScreen then
                local screenPos = Vector2.new(screen3D.X, screen3D.Y)
                local dist = (screenPos - Vector2.new(mousePos.X, mousePos.Y)).Magnitude
                if dist < aimbotFOV and dist < closestDist then
                    closestDist = dist
                    bestHead = head
                end
            end
        end
    end
    return bestHead
end

RunService.RenderStepped:Connect(function()
    if not aiming or not aimbotEnabled or next(cachedNPCs) == nil then
        currentTarget = nil
        return
    end
    if tick() - lastScan > scanCooldown or not currentTarget or not currentTarget:IsDescendantOf(workspace) or not isAlive(currentTarget.Parent) then
        lastScan = tick()
        local newTarget = getClosestTarget()
        if newTarget then
            local rayParams = RaycastParams.new()
            rayParams.FilterType = Enum.RaycastFilterType.Blacklist
            rayParams.FilterDescendantsInstances = {LocalPlayer.Character, Camera}
            local direction = (newTarget.Position - Camera.CFrame.Position).Unit * 1000
            local result = workspace:Raycast(Camera.CFrame.Position, direction, rayParams)
            if result and result.Instance and result.Instance:IsDescendantOf(newTarget.Parent) then
                currentTarget = newTarget
            else
                currentTarget = nil
            end
        else
            currentTarget = nil
        end
    end
    if currentTarget then
        local head = currentTarget
        local screen3D, onScreen = Camera:WorldToViewportPoint(head.Position)
        if onScreen then
            local mousePos = UserInputService:GetMouseLocation()
            local screenPos = Vector2.new(screen3D.X, screen3D.Y)
            local dx = (screenPos.X - mousePos.X) / math.clamp(aimbotSmoothing, 0.6, 100)
            local dy = (screenPos.Y - mousePos.Y) / math.clamp(aimbotSmoothing, 0.6, 100)
            if typeof(mousemoverel) == "function" then
                mousemoverel(dx, dy)
            end
        end
    end
end)

-- MOUSE INPUT
UserInputService.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        aiming = true
    end
end)
UserInputService.InputEnded:Connect(function(input, gp)
    if gp then return end
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        aiming = false
        currentTarget = nil
    end
end)

-- GUI
local gui = Instance.new("ScreenGui")
gui.Name = "AimbotMenu"
gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
if syn and syn.protect_gui then
    syn.protect_gui(gui)
end
gui.Parent = game:GetService("CoreGui")
gui.DisplayOrder = 1000

-- Toggle: Aimbot
local aimbotBtn = Instance.new("TextButton")
aimbotBtn.Size = UDim2.new(0, 100, 0, 30)
aimbotBtn.Position = UDim2.new(0, 130, 0, 140)
aimbotBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
aimbotBtn.TextColor3 = Color3.new(1, 1, 1)
aimbotBtn.Text = "Aimbot: " .. (aimbotEnabled and "ON" or "OFF")
aimbotBtn.Parent = gui

aimbotBtn.MouseButton1Click:Connect(function()
    aimbotEnabled = not aimbotEnabled
    aimbotBtn.Text = "Aimbot: " .. (aimbotEnabled and "ON" or "OFF")
end)

-- Funkcja createSlider (wersja uproszczona)
function createSlider(t, y, min, max, init, cb)
    local f = Instance.new("Frame", gui)
    f.Size = UDim2.new(0, 200, 0, 20)
    f.Position = UDim2.new(0, 20, 0, y)
    f.BackgroundColor3 = Color3.fromRGB(80, 80, 80)

    local fill = Instance.new("Frame", f)
    fill.Size = UDim2.new((init - min) / (max - min), 0, 1, 0)
    fill.BackgroundColor3 = Color3.fromRGB(0, 170, 255)

    local label = Instance.new("TextLabel", f)
    label.Size = UDim2.new(1, 0, 0, 20)
    label.Position = UDim2.new(0, 0, 0, -20)
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.new(1,1,1)
    label.Text = t .. ": " .. tostring(init)

    f.InputBegan:Connect(function(i)
        if i.UserInputType == Enum.UserInputType.MouseButton1 then
            local moveConn
            local endConn
            local function move(mv)
                local relX = math.clamp(mv.Position.X - f.AbsolutePosition.X, 0, f.AbsoluteSize.X)
                local val = math.floor(min + (relX / f.AbsoluteSize.X) * (max - min))
                fill.Size = UDim2.new((val - min) / (max - min), 0, 1, 0)
                label.Text = t .. ": " .. tostring(val)
                cb(val)
            end
            moveConn = UserInputService.InputChanged:Connect(function(mv)
                if mv.UserInputType == Enum.UserInputType.MouseMovement then move(mv) end
            end)
            endConn = UserInputService.InputEnded:Connect(function(mv)
                if mv.UserInputType == Enum.UserInputType.MouseButton1 then
                    moveConn:Disconnect()
                    endConn:Disconnect()
                end
            end)
        end
    end)
end

-- Slider: Aimbot Smoothing
createSlider("Aimbot Smoothing", 60, 0, 100, aimbotSmoothing, function(value)
    aimbotSmoothing = value
end)

-- Slider: Aimbot FOV
createSlider("Aimbot FOV", 100, 10, 180, aimbotFOV, function(value)
    aimbotFOV = value
end)

-- Toggle: Hitbox Expander
local hitboxExpanderBtn = Instance.new("TextButton")
hitboxExpanderBtn.Size = UDim2.new(0, 100, 0, 30)
hitboxExpanderBtn.Position = UDim2.new(0, 20, 0, 140)
hitboxExpanderBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
hitboxExpanderBtn.TextColor3 = Color3.new(1, 1, 1)
hitboxExpanderBtn.Text = "Hitbox: " .. (hitboxExpanderEnabled and "ON" or "OFF")
hitboxExpanderBtn.Parent = gui

hitboxExpanderBtn.MouseButton1Click:Connect(function()
    hitboxExpanderEnabled = not hitboxExpanderEnabled
    hitboxExpanderBtn.Text = "Hitbox: " .. (hitboxExpanderEnabled and "ON" or "OFF")
    if not hitboxExpanderEnabled then
        resetAllHitboxes()
    else
        updateAllHitboxes(currentHitboxSize)
        for npc, data in pairs(cachedNPCs) do
            local head = data.head
            if head then
                head.Transparency = 0.5
                head.Material = Enum.Material.Neon
                head.Color = Color3.new(1,0,0)
            end
        end
    end
end)

-- Input: Hitbox size
local hitboxSizeInput = Instance.new("TextBox")
hitboxSizeInput.Size = UDim2.new(0, 100, 0, 30)
hitboxSizeInput.Position = UDim2.new(0, 20, 0, 180)
hitboxSizeInput.PlaceholderText = "Size of Head Hitbox"
hitboxSizeInput.Text = ""
hitboxSizeInput.TextColor3 = Color3.new(1, 1, 1)
hitboxSizeInput.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
hitboxSizeInput.Parent = gui

local setHitboxSizeBtn = Instance.new("TextButton")
setHitboxSizeBtn.Size = UDim2.new(0, 100, 0, 30)
setHitboxSizeBtn.Position = UDim2.new(0, 130, 0, 180)
setHitboxSizeBtn.Text = "Apply"
setHitboxSizeBtn.TextColor3 = Color3.new(1, 1, 1)
setHitboxSizeBtn.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
setHitboxSizeBtn.Parent = gui

-- Input: Walkspeed
local walkspeedInput = Instance.new("TextBox")
walkspeedInput.Size = UDim2.new(0, 100, 0, 30)
walkspeedInput.Position = UDim2.new(0, 20, 0, 220)
walkspeedInput.PlaceholderText = "Walkspeed (1-200)"
walkspeedInput.Text = ""
walkspeedInput.TextColor3 = Color3.new(1, 1, 1)
walkspeedInput.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
walkspeedInput.Parent = gui

local setWalkspeedBtn = Instance.new("TextButton")
setWalkspeedBtn.Size = UDim2.new(0, 100, 0, 30)
setWalkspeedBtn.Position = UDim2.new(0, 130, 0, 220)
setWalkspeedBtn.Text = "Apply"
setWalkspeedBtn.TextColor3 = Color3.new(1, 1, 1)
setWalkspeedBtn.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
setWalkspeedBtn.Parent = gui

walkspeedInput:GetPropertyChangedSignal("Text"):Connect(function()
    walkspeedInput.Text = walkspeedInput.Text:gsub("[^%d]", "")
end)

local function setAllWalkSpeedToValue(val)
    local keywords = {"walkspeed", "speed", "runspeed", "moveSpeed", "movementSpeed", "maxspeed", "max_speed"}
    for _,v in pairs(getgc(true)) do
        if typeof(v) == "table" then
            for k,field in pairs(v) do
                if type(field) == "number" then
                    for _,word in ipairs(keywords) do
                        if tostring(k):lower():find(word) then
                            v[k] = val
                        end
                    end
                end
            end
        end
    end
end

setWalkspeedBtn.MouseButton1Click:Connect(function()
    local value = tonumber(walkspeedInput.Text)
    if value and value >= 1 and value <= 200 then
        setAllWalkSpeedToValue(value)
        setWalkspeedBtn.Text = "Walkspeed: "..value.." ✓"
        task.wait(1)
        setWalkspeedBtn.Text = "Apply"
    else
        walkspeedInput.Text = "MAX 200"
    end
end)

-- Przycisk: Update ESP
local updateEspBtn = Instance.new("TextButton")
updateEspBtn.Size = UDim2.new(0, 210, 0, 30)
updateEspBtn.Position = UDim2.new(0, 20, 0, 260)
updateEspBtn.Text = "Update ESP"
updateEspBtn.TextColor3 = Color3.new(1, 1, 1)
updateEspBtn.BackgroundColor3 = Color3.fromRGB(120, 80, 80)
updateEspBtn.Parent = gui

-- Przycisk: Reset ESP
local resetEspBtn = Instance.new("TextButton")
resetEspBtn.Size = UDim2.new(0, 210, 0, 30)
resetEspBtn.Position = UDim2.new(0, 20, 0, 300)
resetEspBtn.Text = "Reset ESP"
resetEspBtn.TextColor3 = Color3.new(1, 1, 1)
resetEspBtn.BackgroundColor3 = Color3.fromRGB(120, 120, 80)
resetEspBtn.Parent = gui

resetEspBtn.MouseButton1Click:Connect(function()
    -- Usuń wszystkie ESP
    for npc, data in pairs(cachedNPCs) do
        local head = data.head
        if head then
            local esp = head:FindFirstChild("HeadESP")
            if esp then
                esp:Destroy()
            end
            clearHeadVisuals(head)
        end
    end
    createdESP = {}
    -- Ponownie utwórz ESP dla wszystkich NPC
    for npc, data in pairs(cachedNPCs) do
        createNpcHeadESP(npc)
    end
end)

-- Lepsza walidacja inputu w GUI
hitboxSizeInput:GetPropertyChangedSignal("Text"):Connect(function()
    hitboxSizeInput.Text = hitboxSizeInput.Text:gsub("[^%d]", "")
end)

setHitboxSizeBtn.MouseButton1Click:Connect(function()
    local value = tonumber(hitboxSizeInput.Text)
    if value and value >= 1 and value <= 25 then
        currentHitboxSize = value
        updateAllHitboxes(currentHitboxSize)
    else
        hitboxSizeInput.Text = "MAX 24"
    end
end)

updateEspBtn.MouseButton1Click:Connect(function()
    for _, npc in ipairs(workspace:GetChildren()) do
        if npc:IsA("Model") and npc.Name == "Male" and hasAllowedWeapon(npc) and isAlive(npc) then
            processNPC(npc)
        end
    end
end)

resetEspBtn.MouseButton1Click:Connect(function()
    for npc, data in pairs(cachedNPCs) do
        local head = data.head
        if head then
            local esp = head:FindFirstChild("HeadESP")
            if esp then
                esp:Destroy()
            end
            clearHeadVisuals(head)
        end
    end
    createdESP = {}
end)

-- Przycisk: No Recoil/No Spread
local noRecoilBtn = Instance.new("TextButton")
noRecoilBtn.Size = UDim2.new(0, 120, 0, 30)
noRecoilBtn.Position = UDim2.new(0, 240, 0, 10)
noRecoilBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
noRecoilBtn.TextColor3 = Color3.new(1, 1, 1)
noRecoilBtn.Text = "No Recoil/Spread"
noRecoilBtn.Parent = gui

local function zeroSelectedRecoilRecoilSpread()
    for _,v in pairs(getgc(true)) do
        if typeof(v) == "table" then
            for k,val in pairs(v) do
                if type(val) == "number" and (k == "RecoilForce" or k == "Spread" or k == "Recoil") then
                    v[k] = 0
                end
            end
        end
    end
end

noRecoilBtn.MouseButton1Click:Connect(function()
    zeroSelectedRecoilRecoilSpread()
    noRecoilBtn.Text = "No Recoil/Spread ✓"
    task.wait(1)
    noRecoilBtn.Text = "No Recoil/Spread"
end)

-- ☀️ FULLBRIGHT & NOFOG
local brightLoop = nil
local function LoopFullBright()
    if brightLoop then brightLoop:Disconnect() end
    brightLoop = RunService.RenderStepped:Connect(function()
        Lighting.Brightness = 2
        Lighting.ClockTime = 14
        Lighting.FogEnd = 100000
        Lighting.GlobalShadows = false
        Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)
        Lighting.Ambient = Color3.fromRGB(200, 200, 200)
    end)
end

local function StopFullBright()
    if brightLoop then brightLoop:Disconnect() brightLoop = nil end
    Lighting.Brightness = 1
    Lighting.GlobalShadows = true
    Lighting.FogEnd = originalFogEnd
end

local function applyNoFog()
    Lighting.FogEnd = 100000
    for _, v in pairs(Lighting:GetDescendants()) do
        if v:IsA("Atmosphere") then
            table.insert(originalAtmospheres, v:Clone())
            v:Destroy()
        end
    end
end

local function disableNoFog()
    Lighting.FogEnd = originalFogEnd
    for _, v in pairs(originalAtmospheres) do
        v.Parent = Lighting
    end
    originalAtmospheres = {}
end

-- Toggle: Fullbright
local fullbrightEnabled = false
local fullbrightBtn = Instance.new("TextButton")
fullbrightBtn.Size = UDim2.new(0, 100, 0, 30)
fullbrightBtn.Position = UDim2.new(0, 20, 0, 10)
fullbrightBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
fullbrightBtn.TextColor3 = Color3.new(1, 1, 1)
fullbrightBtn.Text = "Fullbright: OFF"
fullbrightBtn.Parent = gui

fullbrightBtn.MouseButton1Click:Connect(function()
    fullbrightEnabled = not fullbrightEnabled
    if fullbrightEnabled then
        LoopFullBright()
        fullbrightBtn.Text = "Fullbright: ON"
    else
        StopFullBright()
        fullbrightBtn.Text = "Fullbright: OFF"
    end
end)

-- Toggle: NoFog
local nofogEnabled = false
local nofogBtn = Instance.new("TextButton")
nofogBtn.Size = UDim2.new(0, 100, 0, 30)
nofogBtn.Position = UDim2.new(0, 130, 0, 10)
nofogBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
nofogBtn.TextColor3 = Color3.new(1, 1, 1)
nofogBtn.Text = "NoFog: OFF"
nofogBtn.Parent = gui

nofogBtn.MouseButton1Click:Connect(function()
    nofogEnabled = not nofogEnabled
    if nofogEnabled then
        applyNoFog()
        nofogBtn.Text = "NoFog: ON"
    else
        disableNoFog()
        nofogBtn.Text = "NoFog: OFF"
    end
end)

-- Toggle GUI visibility with Right Shift
local guiVisible = true
UserInputService.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == Enum.KeyCode.RightShift then
        guiVisible = not guiVisible
        gui.Enabled = guiVisible
    end
end)

-- Przycisk: Przywróć domyślną prędkość
local resetWalkspeedBtn = Instance.new("TextButton")
resetWalkspeedBtn.Size = UDim2.new(0, 100, 0, 30)
resetWalkspeedBtn.Position = UDim2.new(0, 240, 0, 220)
resetWalkspeedBtn.Text = "Reset Speed"
resetWalkspeedBtn.TextColor3 = Color3.new(1, 1, 1)
resetWalkspeedBtn.BackgroundColor3 = Color3.fromRGB(80, 80, 120)
resetWalkspeedBtn.Parent = gui

resetWalkspeedBtn.MouseButton1Click:Connect(function()
    setAllWalkSpeedToValue(16)
    resetWalkspeedBtn.Text = "Reset ✓"
    task.wait(1)
    resetWalkspeedBtn.Text = "Reset Speed"
end)

